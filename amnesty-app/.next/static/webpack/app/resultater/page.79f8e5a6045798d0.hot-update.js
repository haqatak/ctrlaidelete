"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/resultater/page",{

/***/ "(app-pages-browser)/./src/lib/data/personalityMatching.ts":
/*!*********************************************!*\
  !*** ./src/lib/data/personalityMatching.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateDimensionScores: () => (/* binding */ calculateDimensionScores),\n/* harmony export */   findMatchingPersonalityType: () => (/* binding */ findMatchingPersonalityType),\n/* harmony export */   findRecommendedCauses: () => (/* binding */ findRecommendedCauses),\n/* harmony export */   generateEnhancedUserResult: () => (/* binding */ generateEnhancedUserResult),\n/* harmony export */   generateUserResult: () => (/* binding */ generateUserResult)\n/* harmony export */ });\n/* harmony import */ var _questionDimensionMappings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./questionDimensionMappings */ \"(app-pages-browser)/./src/lib/data/questionDimensionMappings.ts\");\n/* harmony import */ var _personalityTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./personalityTypes */ \"(app-pages-browser)/./src/lib/data/personalityTypes.ts\");\n/* harmony import */ var _dimensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dimensions */ \"(app-pages-browser)/./src/lib/data/dimensions.ts\");\n/* harmony import */ var _amnestyCauses__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./amnestyCauses */ \"(app-pages-browser)/./src/lib/data/amnestyCauses.ts\");\n// Personality matching algorithm for Amnesty International Interactive Experience\n\n\n\n\n/**\n * Calculate dimension scores based on user responses\n * @param responses Array of user responses (agree/disagree)\n * @returns Object mapping dimension IDs to scores\n */ function calculateDimensionScores(responses) {\n    // Initialize scores for all dimensions to 0\n    const dimensionScores = {};\n    const dimensionCounts = {};\n    _dimensions__WEBPACK_IMPORTED_MODULE_2__.dimensions.forEach((dimension)=>{\n        dimensionScores[dimension.id] = 0;\n        dimensionCounts[dimension.id] = 0;\n    });\n    // Process each response\n    responses.forEach((response)=>{\n        // Find all dimension mappings for this question\n        const mappings = _questionDimensionMappings__WEBPACK_IMPORTED_MODULE_0__.questionDimensionMappings.filter((mapping)=>mapping.questionId === response.questionId);\n        // Update scores based on response\n        mappings.forEach((mapping)=>{\n            // If user agrees, add the weight; if disagrees, subtract the weight\n            const scoreChange = response.agree ? mapping.weight : -mapping.weight;\n            dimensionScores[mapping.dimensionId] += scoreChange;\n            dimensionCounts[mapping.dimensionId]++; // Count how many questions affect each dimension\n        });\n    });\n    // Normalize scores to a scale of -10 to 10, but account for number of questions per dimension\n    _dimensions__WEBPACK_IMPORTED_MODULE_2__.dimensions.forEach((dimension)=>{\n        const dimId = dimension.id;\n        const rawScore = dimensionScores[dimId];\n        const questionCount = dimensionCounts[dimId];\n        if (questionCount > 0) {\n            // Normalize based on actual questions answered for this dimension\n            // This prevents dimensions with fewer questions from being under-represented\n            const avgScorePerQuestion = rawScore / questionCount;\n            // Scale to -10 to 10 range, with a factor to make scores more pronounced\n            // The 3 is based on our weight scale of -3 to 3\n            dimensionScores[dimId] = Math.max(-10, Math.min(10, avgScorePerQuestion * (10 / 3)));\n        } else {\n            // If no questions affected this dimension, leave it at 0\n            dimensionScores[dimId] = 0;\n        }\n    });\n    return dimensionScores;\n}\n/**\n * Determine the best matching personality type based on dimension scores\n * @param dimensionScores Object mapping dimension IDs to scores\n * @returns ID of the best matching personality type\n */ function findMatchingPersonalityType(dimensionScores) {\n    // Personality type matching profiles\n    // Each profile defines the expected dimension scores for a personality type\n    const personalityProfiles = {\n        // Den Globale Aktivisten (The Global Activist)\n        1: {\n            1: 8,\n            2: 9,\n            3: 5,\n            4: -7,\n            5: 6,\n            6: -3,\n            7: 4,\n            8: 7,\n            9: 8,\n            10: 0 // Neutral on reform vs system change\n        },\n        // Den Medfølende Forsvareren (The Compassionate Defender)\n        2: {\n            1: 3,\n            2: 6,\n            3: 2,\n            4: -2,\n            5: 5,\n            6: -1,\n            7: 9,\n            8: 4,\n            9: 9,\n            10: 3 // Moderate on reform\n        },\n        // Frihetsforkjemperen (The Liberty Advocate)\n        3: {\n            1: 5,\n            2: 3,\n            3: 10,\n            4: 2,\n            5: -5,\n            6: -9,\n            7: 0,\n            8: -7,\n            9: 3,\n            10: 0 // Neutral on reform vs system change\n        },\n        // Likestillingsforkjemperen (The Equality Champion)\n        4: {\n            1: 6,\n            2: 7,\n            3: 0,\n            4: -3,\n            5: 10,\n            6: 0,\n            7: 5,\n            8: 8,\n            9: 6,\n            10: 4 // Moderate on reform\n        },\n        // Den Pragmatiske Reformatoren (The Pragmatic Reformer)\n        5: {\n            1: -6,\n            2: 2,\n            3: 0,\n            4: 3,\n            5: 2,\n            6: 3,\n            7: -2,\n            8: 0,\n            9: -5,\n            10: 9 // Very high on reform\n        },\n        // Tradisjonsvokteren (The Tradition Guardian)\n        6: {\n            1: -8,\n            2: -9,\n            3: -3,\n            4: 9,\n            5: -4,\n            6: 7,\n            7: -3,\n            8: -5,\n            9: -2,\n            10: 2 // Slightly positive on reform\n        },\n        // Systemkritikeren (The System Critic)\n        7: {\n            1: 7,\n            2: 4,\n            3: -2,\n            4: 0,\n            5: 8,\n            6: -4,\n            7: 3,\n            8: 10,\n            9: 5,\n            10: -9 // Very low on reform (strongly favors system change)\n        },\n        // Rettstatsforkjemperen (The Rule of Law Advocate)\n        8: {\n            1: -7,\n            2: 5,\n            3: 3,\n            4: 4,\n            5: 6,\n            6: 5,\n            7: -5,\n            8: 2,\n            9: 0,\n            10: 8 // High on reform\n        },\n        // Miljørettighetsaktivisten (The Environmental Rights Activist)\n        9: {\n            1: 8,\n            2: 6,\n            3: -4,\n            4: -2,\n            5: 5,\n            6: 0,\n            7: 7,\n            8: 6,\n            9: 8,\n            10: -6 // Low on reform (favors system change)\n        }\n    };\n    // Calculate similarity scores for each personality type\n    const similarityScores = {};\n    Object.entries(personalityProfiles).forEach((param)=>{\n        let [typeId, profile] = param;\n        let similarity = 0;\n        let weightsSum = 0;\n        // Calculate weighted Euclidean distance (lower is better)\n        Object.entries(profile).forEach((param)=>{\n            let [dimensionId, expectedScore] = param;\n            const dimId = Number(dimensionId);\n            const userScore = dimensionScores[dimId] || 0;\n            const difference = userScore - expectedScore;\n            // Give more weight to extreme expected scores (values near -10 or 10)\n            // These are more defining characteristics of personality types\n            const weight = Math.abs(expectedScore) / 5;\n            weightsSum += weight;\n            similarity -= difference * difference * weight; // Negative weighted squared difference\n        });\n        // Normalize by sum of weights to make comparison fair\n        if (weightsSum > 0) {\n            similarity = similarity / weightsSum;\n        }\n        similarityScores[Number(typeId)] = similarity;\n    });\n    // Find personality type with highest similarity score\n    let bestMatchTypeId = 1;\n    let highestSimilarity = Number.NEGATIVE_INFINITY;\n    Object.entries(similarityScores).forEach((param)=>{\n        let [typeId, score] = param;\n        if (score > highestSimilarity) {\n            highestSimilarity = score;\n            bestMatchTypeId = Number(typeId);\n        }\n    });\n    return bestMatchTypeId;\n}\n/**\n * Find recommended Amnesty causes based on personality type\n * @param personalityTypeId ID of the matched personality type\n * @returns Array of recommended cause IDs\n */ function findRecommendedCauses(personalityTypeId) {\n    // Mapping of personality types to recommended causes\n    // In a real implementation, this would come from the database\n    const recommendationMap = {\n        1: [\n            1,\n            4,\n            8\n        ],\n        2: [\n            1,\n            9,\n            6\n        ],\n        3: [\n            2,\n            7,\n            4\n        ],\n        4: [\n            6,\n            9,\n            5\n        ],\n        5: [\n            3,\n            8,\n            2\n        ],\n        6: [\n            10,\n            2,\n            3\n        ],\n        7: [\n            3,\n            5,\n            8\n        ],\n        8: [\n            4,\n            2,\n            7\n        ],\n        9: [\n            10,\n            3,\n            8\n        ] // Environmental Rights Activist: Indigenous Rights, Corporate Accountability, Protection in Conflict Zones\n    };\n    return recommendationMap[personalityTypeId] || [\n        1,\n        2,\n        3\n    ]; // Default recommendations if no match\n}\n/**\n * Generate a complete user result based on responses\n * @param responses Array of user responses\n * @returns Complete user result with personality type, dimension scores, and recommended causes\n */ function generateUserResult(responses, sessionId) {\n    // Calculate dimension scores\n    const dimensionScores = calculateDimensionScores(responses);\n    // Find matching personality type\n    const personalityTypeId = findMatchingPersonalityType(dimensionScores);\n    // Find recommended causes\n    const recommendedCauses = findRecommendedCauses(personalityTypeId);\n    return {\n        sessionId,\n        personalityTypeId,\n        dimensionScores,\n        recommendedCauses\n    };\n}\n/**\n * Generate an enhanced user result with all related data for display\n * @param responses Array of user responses\n * @param sessionId Session identifier\n * @returns Enhanced user result with full details for UI display\n */ function generateEnhancedUserResult(responses, sessionId) {\n    // Generate the basic user result\n    const userResult = generateUserResult(responses, sessionId);\n    // Get the personality type\n    const personalityType = _personalityTypes__WEBPACK_IMPORTED_MODULE_1__.personalityTypes.find((p)=>p.id === userResult.personalityTypeId);\n    // Format dimension details and sort by absolute score (highest first)\n    const dimensionDetails = Object.entries(userResult.dimensionScores).map((param)=>{\n        let [dimId, score] = param;\n        const dimension = _dimensions__WEBPACK_IMPORTED_MODULE_2__.dimensions.find((d)=>d.id === Number(dimId));\n        return {\n            dimension,\n            score,\n            description: score > 0 ? dimension === null || dimension === void 0 ? void 0 : dimension.highDescription : dimension === null || dimension === void 0 ? void 0 : dimension.lowDescription\n        };\n    }).sort((a, b)=>Math.abs(b.score) - Math.abs(a.score));\n    // Get the recommended causes\n    const causes = userResult.recommendedCauses.map((causeId)=>_amnestyCauses__WEBPACK_IMPORTED_MODULE_3__.amnestyCauses.find((c)=>c.id === causeId));\n    return {\n        userResult,\n        personalityType,\n        dimensionDetails,\n        causes\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/data/personalityMatching.ts\n"));

/***/ })

});